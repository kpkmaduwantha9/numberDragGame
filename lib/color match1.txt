import 'dart:math';

import 'package:confetti/confetti.dart';
import 'package:flutter/material.dart';

void main() {
  runApp(ColorMatchingGame());
}

class ColorMatchingGame extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: GameScreen(),
    );
  }
}

class GameScreen extends StatefulWidget {
  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  late ConfettiController _confettiController;

  // Define the colors for draggable circles
  final List<ColorItem> draggableColors = [
    ColorItem(name: "RED", color: Colors.red),
    ColorItem(name: "BLUE", color: Colors.blue),
    ColorItem(name: "GREEN", color: Colors.green),
  ];

  // Define the order for target text labels
  final List<String> targetColorNames = [
    "GREEN",
    "RED",
    "BLUE",
  ];

  final Map<String, bool> placedColors = {};
  final Map<String, Color> textColors = {};
  bool isWrong = false;

  @override
  void initState() {
    super.initState();
    _confettiController = ConfettiController(duration: Duration(seconds: 5));

    // Initialize the maps
    for (var colorItem in draggableColors) {
      placedColors[colorItem.name] = false;
      textColors[colorItem.name] = Colors.black;
    }
  }

  @override
  void dispose() {
    _confettiController.dispose();
    super.dispose();
  }

  void checkAnswer(ColorItem colorItem, String targetColorName) {
    if (colorItem.name == targetColorName) {
      setState(() {
        placedColors[colorItem.name] = true;
        textColors[colorItem.name] = colorItem.color;
        isWrong = false;
      });

      if (placedColors.values.every((isPlaced) => isPlaced)) {
        _confettiController.play();
      }
    } else {
      setState(() {
        isWrong = true;
      });
    }
  }

  void resetGame() {
    setState(() {
      placedColors.updateAll((key, value) => false);
      textColors.updateAll((key, value) => Colors.black);
      isWrong = false;
    });
  }

  void resetWrong() {
    setState(() {
      isWrong = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.amber.shade100,
      body: LayoutBuilder(
        builder: (context, constraints) {
          double screenWidth = constraints.maxWidth;
          double screenHeight = constraints.maxHeight;
          double circleSize = screenWidth * 0.15;
          double fontSize = screenWidth * 0.06;
          double spacing = screenHeight * 0.02;

          return SingleChildScrollView(
            child: Column(
              children: [
                _buildHeader(fontSize, screenHeight),
                SizedBox(height: spacing),
                _buildDropTargets(fontSize, screenWidth),
                SizedBox(height: spacing * 4),
                _buildDraggableCircles(circleSize, screenWidth),
                SizedBox(height: spacing * 4),
                _buildResultUI(fontSize, spacing),
                _buildConfetti(),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildHeader(double fontSize, double screenHeight) {
    return Container(
      height: screenHeight * 0.25,
      width: double.infinity,
      child: CustomPaint(
        painter: CurvedTopPainter(),
        child: Center(
          child: Text(
            "Match the Colors",
            style: TextStyle(
              fontSize: fontSize * 1.5,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildDropTargets(double fontSize, double screenWidth) {
    return Wrap(
      spacing: screenWidth * 0.1,
      runSpacing: fontSize * 1.5,
      alignment: WrapAlignment.center,
      children: targetColorNames
          .map((colorName) => dropTarget(colorName, fontSize))
          .toList(),
    );
  }

  Widget _buildDraggableCircles(double circleSize, double screenWidth) {
    return placedColors.values.every((isPlaced) => isPlaced)
        ? SizedBox.shrink()
        : Wrap(
            spacing: screenWidth * 0.1,
            runSpacing: circleSize * 0.5,
            alignment: WrapAlignment.center,
            children: draggableColors.map((colorItem) {
              bool isPlaced = placedColors[colorItem.name] ?? false;
              Color displayColor =
                  isPlaced ? colorItem.color.withOpacity(0.2) : colorItem.color;
              return draggableCircle(colorItem, displayColor, circleSize);
            }).toList(),
          );
  }

  Widget _buildResultUI(double fontSize, double spacing) {
    if (placedColors.values.every((isPlaced) => isPlaced)) {
      return Column(
        children: [
          Text(
            "üéâ Correct! üéâ",
            style: TextStyle(
              fontSize: fontSize * 2,
              fontWeight: FontWeight.bold,
              color: Colors.green,
            ),
          ),
          SizedBox(height: spacing),
          ElevatedButton(
            onPressed: resetGame,
            child: Text("Play Again", style: TextStyle(fontSize: fontSize * 1)),
          ),
        ],
      );
    } else if (isWrong) {
      return Column(
        children: [
          Text(
            "‚ùå Try Again!",
            style: TextStyle(
              fontSize: fontSize * 1,
              fontWeight: FontWeight.bold,
              color: Colors.red,
            ),
          ),
          SizedBox(height: spacing * 2),
          ElevatedButton(
            onPressed: resetWrong,
            child:
                Text("Try Again", style: TextStyle(fontSize: fontSize * 0.8)),
          ),
        ],
      );
    }
    return SizedBox.shrink();
  }

  Widget _buildConfetti() {
    return ConfettiWidget(
      confettiController: _confettiController,
      blastDirection: pi / 2,
      emissionFrequency: 0.2,
      shouldLoop: false,
      numberOfParticles: 100,
      blastDirectionality: BlastDirectionality.explosive,
      gravity: 0.1,
      colors: [Colors.red, Colors.blue, Colors.green, Colors.yellow],
    );
  }

  Widget draggableCircle(ColorItem colorItem, Color displayColor, double size) {
    return Draggable<ColorItem>(
      data: colorItem,
      child: circleWidget(displayColor, size * 1.5),
      feedback: circleWidget(displayColor, size * 1.5),
      childWhenDragging:
          Opacity(opacity: 0.3, child: circleWidget(displayColor, size * 1.5)),
    );
  }

  Widget dropTarget(String colorName, double fontSize) {
    return DragTarget<ColorItem>(
      onAccept: (colorItem) => checkAnswer(colorItem, colorName),
      builder: (context, candidateData, rejectedData) {
        Color textColor = textColors[colorName] ?? Colors.black;

        return Container(
          padding: EdgeInsets.all(1),
          /*decoration: BoxDecoration(
            border: Border.all(color: Colors.black, width: 2),
            borderRadius: BorderRadius.circular(8),
          ),*/
          child: Text(
            colorName,
            style: TextStyle(
              fontSize: fontSize * 2,
              fontWeight: FontWeight.w900,
              color: textColor,
            ),
          ),
        );
      },
    );
  }

  Widget circleWidget(Color color, double size) {
    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        color: color,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black26,
            blurRadius: 5,
            offset: Offset(2, 2),
          ),
        ],
      ),
    );
  }
}

class CurvedTopPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    Paint paint = Paint()..color = Colors.orange.shade500;
    Path path = Path();
    path.moveTo(0, 0);
    path.lineTo(0, size.height * 0.8);
    path.quadraticBezierTo(
        size.width / 2, size.height, size.width, size.height * 0.8);
    path.lineTo(size.width, 0);
    path.close();
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

class ColorItem {
  final String name;
  final Color color;

  ColorItem({required this.name, required this.color});
}
